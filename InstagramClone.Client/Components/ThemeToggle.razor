@inject IJSRuntime JS
@using InstagramClone.Client.Resources

<button @onclick="ToggleTheme" 
        class="p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
        title="@UI.Theme_Toggle">
    @if (IsDark)
    {
        <!-- Sun icon for light mode -->
        <svg class="w-6 h-6 text-gray-700 dark:text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                  d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
        </svg>
    }
    else
    {
        <!-- Moon icon for dark mode -->
        <svg class="w-6 h-6 text-gray-700 dark:text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                  d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
        </svg>
    }
</button>

@code {
    private bool IsDark { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Check if dark class is actually applied to the document
                var isDarkApplied = await JS.InvokeAsync<bool>("eval", "document.documentElement.classList.contains('dark')");
                IsDark = isDarkApplied;
                StateHasChanged();
            }
            catch
            {
                IsDark = false;
            }
        }
    }

    private async Task ToggleTheme()
    {
        try
        {
            var newTheme = await JS.InvokeAsync<string>("themeManager.toggle");
            IsDark = newTheme == "dark";
        }
        catch
        {
            // Fallback toggle
            IsDark = !IsDark;
        }
    }
}

